<%
if (DATA.name !== undefined) {
    var name, model, opts;
    name = DATA.name;
    model = DATA.model;
    opts = DATA.opts;
}
var name = name || "";
var options = {
    placeholder: params.capitalize(name),
    icon: {
        class: "none",
        position: "left",
        color: COLOR.secundary + "-800"
    },
    helptext: '',
    posttype: "color",
    disabled: false

};
options = OBJECT.merge(options, opts); var nameclean = name.replace(/\./g, '_');
popopme = function (entity, field) {
    var prueba = HINTS.filter(d => {
        return (d.trueEntity || d.entities) === entity && d.field_names === field
    })

    function sortArray() {
        options.mess = prueba.sort(function (a, b) {
            return b.id - a.id
        });
    }

    sortArray();
}
popopme(model, nameclean);
var toclient = JSON.stringify(options);
%>
<script>
    <%= model %>.triggers.table.before.control("<%= nameclean %>");
    <%= model %>.form.registerField("<%= name %>", "<%= toclient %>");
    if (MESSAGE.exist('columns.<%= nameclean %>')) {
        <%= model %>.
        form.options.<%= name %>.placeholder = MESSAGE.ic('columns.<%= nameclean %>');
    }
    if (new SESSION().isLogged()) {
        <%= model %>.
        form.options.<%= name %>.mess = <%= model %>.
        form.options.<%= name %>.mess.filter(d => {
            return d.company == new SESSION().current().compania_id;
        })
        if (<%= model %>.
        form.options.<%= name %>.mess.length == 0
    )
        {
            delete <%= model %>.
            form.options.<%= name %>.mess
        }
        if (<%= model %>.
        form.options.<%= name %>.mess
    )
        {
            <%= model %>.
            form.options.<%= name %>.popover = {
                title:
                <%= model %>.form.options.<%= name %>.mess[0].field_names.replace('_', ' '),
                content:
                <%= model %>.form.options.<%= name %>.mess[0].text,
                label: MESSAGE.exist('columns.<%= nameclean %>') ? MESSAGE.i('columns.<%= nameclean %>') :
                <%= model %>.form.options.<%= name %>.trueplaceholder ||
                <%= model %>.form.options.<%= name %>.placeholder
            }
        }
    }
    var isReadProgram = <%= model %>.form.isReadOnly('<%= name %>');
    if (isReadProgram !== false) {
        <%= model %>.
        form.options.<%= name %>.disabled = true;
        if (isReadProgram !== undefined) {
            <%= model %>.<%= name %> = isReadProgram;
        }
    }
</script>
<div class="form-group-material form-group has-feedback has-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}  has-feedback-<%= options.icon.position %>"
     id="input<%= model %>_<%= nameclean %>">
    <label

            class="control-label is-visible animate" style="color:#000000 !important;">
        {{::<%= model %>.form.options.<%= name %>.trueplaceholder || <%= model %>.form.options.<%= name %>.placeholder
        }}
        <i ng-show="<%= model %>.form.options.<%= name %>.mess.length>0"
           id="popover<%= model %>_<%= nameclean %>" class="icon-help">
        </i>
    </label>
    <input style="margin-top: -14px;    height: 52px;"
           ng-model="<%= model + "." + name %>"
           name="<%= model %>_<%= nameclean %>"
           type="color"
           class="form-control">


    <div style="margin: 10px; margin-top: 0px; top: 35px" class="form-control-feedback"
         ng-if="<%= model %>.form.options.<%= name %>.icon.class!=='none'">
        <i class="icon-<%= options.icon.class %> text-secundary">

        </i>
    </div>
    <span ng-if="<%= model %>.form.options.<%= name %>.helptext!=''"
          class="help-block text-muted">
        {{<%= model %>.form.options.<%= name %>.helptext}}
    </span>

    <span ng-show="<%= model %>.validate['<%= name %>'].messages.length>0" class="help-block">
        <p class="text-{{validation.type}}" ng-show="validation.visible!==false || <%= model %>.form.intent===true"
           ng-repeat="(key,validation) in <%= model %>.validate['<%= name %>'].messages track by key">
               <i class="{{validation.icon}}"></i> {{validation.message}}
        </p>
    </span>
</div>
<script type="text/javascript">

    $(document).ready(function () {


        <%= model %>.
        triggers.table.after.control("<%= nameclean %>");
        if (isReadProgram !== false) {
            if (isReadProgram !== undefined) {
                $('.sp-preview-inner').css('background-color', isReadProgram)
            }
        }


        if (new SESSION().isLogged()) {
            if (<%= model %>.form.options.<%= name %>.mess) {
                $('#popover<%= model %>_<%= nameclean %>').popover({
                    container: 'body',
                    title: eval("`" +<%= model %>.form.options.<%= name %>.placeholderl + "`"),
                    content: eval("`" +<%= model %>.form.options.<%= name %>.popover.content + "`"),
                    trigger: 'manual'
                });
                // Obtén el elemento que deseas observar
                const elemento = document.getElementById("popover<%= model %>_<%= nameclean %>");

                // Agrega un event listener al objeto document
                document.addEventListener("click", function(evento) {
                    // Verifica si el evento ocurrió fuera del elemento que estamos observando
                    if (elemento !== evento.target && !elemento.contains(evento.target)) {
                        // Se hizo clic fuera del elemento
                        $('#popover<%= model %>_<%= nameclean %>').popover('hide')

                    }
                });
                $('#popover<%= model %>_<%= nameclean %>').on('click', function(evento) {
                    evento.stopPropagation();
                    $(this).popover('show');
                });
            }
        }
    });
</script>
