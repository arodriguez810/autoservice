<%
$type = String;
$type.__typeName = 'String';
$type.__class = true;
$prototype = $type.prototype;
$prototype.replaceAll = function (search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

$prototype.replaceAll2 = function (search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};

MENUONEROW = [];
TONES = [];
for (var i in CONFIG.ui.shadows) {
    TONES.push({id: i, name: i.replace("_", " ")});
}
addMenu = function (prefix, array) {
    for (var menu of array) {
        if (menu.href !== "#") {
            MENUONEROW.push({
                id: menu.href,
                icon: menu.icon,
                category: prefix.join(", "),
                name: menu.text
            });
        } else {
            if (menu.menus !== undefined) {
                var newprefix = [];
                for (var i in prefix)
                    newprefix.push(prefix[i]);
                newprefix.push(menu.text);
                addMenu(newprefix, menu.menus);
            }
        }
    }
}
addMenu([], CONFIG.menus);
%>
<script>


    MENUMODAL = false;
    CHANGINGMENU = true;
    PRUDENTS = {};
    CURRENTPRUDENTS = "";
    WARNINGREQUESTS = [];
    CONFIG = "<%= JSON.stringify(CONFIG) %>";
    CONFIG = eval("(" + CONFIG.replaceAll("&#34;", '"') + ")");
    MENUONEROW = "<%= JSON.stringify(MENUONEROW) %>";
    MENUONEROW = eval("(" + MENUONEROW.replaceAll("&#34;", '"') + ")");

    CURRENCIES = "<%= JSON.stringify(CURRENCIES) %>";
    CURRENCIES = eval("(" + CURRENCIES.replaceAll("&#34;", '"') + ")");

    LANGUAGE = "<%= JSON.stringify(LANGUAGE) %>";
    LANGUAGE = eval("(" + LANGUAGE.replaceAll("&#34;", '"') + ")");
    CONTROLS = "<%= JSON.stringify(controls) %>";
    CONTROLS = eval("(" + CONTROLS.replaceAll("&#34;", '"') + ")");
    SHOWLANGS = "<%= JSON.stringify(SHOWLANGS) %>";
    SHOWLANGS = eval("(" + SHOWLANGS.replaceAll("&#34;", '"') + ")");
    COLOR = "<%= JSON.stringify(COLOR) %>";
    COLOR = eval("(" + COLOR.replaceAll("&#34;", '"') + ")");
    TAG = "<%= JSON.stringify(TAG) %>";
    TAG = eval("(" + TAG.replaceAll("&#34;", '"') + ")");
    FOLDERS = "<%= JSON.stringify(FOLDERS) %>";
    FOLDERS = eval("(" + FOLDERS.replaceAll("&#34;", '"') + ")");
    THEMES = "<%= JSON.stringify(THEMES) %>";
    THEMES = eval("(" + THEMES.replaceAll("&#34;", '"') + ")");
    DATA = "<%= JSON.stringify(DATA) %>";
    DATA = "<%= JSON.stringify(DATA) %>";
    DATA = eval("(" + DATA.replaceAll("&#34;", '"') + ")");
    SERVICES = "<%= JSON.stringify(SERVICES) %>";
    SERVICES = eval("(" + SERVICES.replaceAll("&#34;", '"') + ")");
    SERVICE.run(SERVICES);
    MODEL = {};
    MODELLIST = "<%= JSON.stringify(models) %>";
    MODELLIST = eval("(" + MODELLIST.replaceAll("&#34;", '"') + ")");
    CONTROLLERS = "<%= JSON.stringify(controllersjs) %>";
    CONTROLLERS = eval("(" + CONTROLLERS.replaceAll("&#34;", '"') + ")");

    MADARAS = "<%= JSON.stringify(customControls) %>".replaceAll("&#34;", '"');
    MADARAS = MADARAS.split("999999999");
    MADARASF = [];
    MADARAS.forEach(d => {
        let content = d.split('111111111');
        MADARASF[content[0].replaceAll("\"", "")] = content[1];
    });
    //MADARAS = eval("(" + MADARAS.replaceAll("&#34;", '"') + ")");
    PEI_ID = null;
    for (var cur of CURRENCIES) {
        eval(`var ${cur.name} = value => currency(value, {symbol: '${cur.symbol}', decimal: '${cur.decimal}', separator: '${cur.separator}'});`)
    }

    CONTROLLERSNAMES = [];
    for (var CONTROLLER of CONTROLLERS) {
        var name = CONTROLLER.split('CO_')[1].split('.js')[0];
        if (["BASE"].indexOf(name) === -1) {
            CONTROLLERSNAMES.push(name);
            if (MODELLIST.indexOf(name) === -1) {
                MODELLIST.push(name);
            }
        }
    }
    RELATIONS = {};
    RELATIONS.anonymous = [];
    var space = " ";
    var quote = "'";
    $(".sidebar, .navbar, .navbar-brand, .navbar-text, .navbar-nav > li, .page-header, .page-title, .page-header .heading-elements, .breadcrumb, .breadcrumb-elements > li, .content > .panel, .content .row > [class*=col-], .footer")
        .css('opacity', 0);
    MESSAGE.run();
    PERMISSIONS.format();
    LAN = MESSAGE.current();
    LAN.money = eval(LAN.money);
    moment.locale(LAN.time);

    LAN.datetime = value => moment(value || new Date()).format("LL LT");
    LAN.date = value => moment(value || new Date()).format("LL");
    LAN.time = value => moment(value || new Date()).format("LT");

    LAN.fullDate = value => moment(value || new Date()).format("LLLL");

    LAN.fullYear = value => moment(value || new Date()).format("Y");
    LAN.shortYear = value => moment(value || new Date()).format("YY");

    LAN.monthName = value => moment(value || new Date()).format("MMMM");
    LAN.shortMonth = value => moment(value || new Date()).format("MMM");
    LAN.zeroMonth = value => moment(value || new Date()).format("MMM");
    LAN.month = value => moment(value || new Date()).format("M");

    LAN.day = value => moment(value || new Date()).format("D");
    LAN.shortWeekDay = value => moment(value || new Date()).format("dd");
    LAN.mediumWeekDay = value => moment(value || new Date()).format("ddd");
    LAN.weekDay = value => moment(value || new Date()).format("dddd");
    LAN.week = value => moment(value || new Date()).format("w");

    LAN.hour = value => moment(value || new Date()).format("h");
    LAN.zeroHour = value => moment(value || new Date()).format("hh");
    LAN.hour24 = value => moment(value || new Date()).format("H");
    LAN.zeroHour24 = value => moment(value || new Date()).format("HH");

    LAN.minute = value => moment(value || new Date()).format("m");
    LAN.zeroMinute = value => moment(value || new Date()).format("mm");

    LAN.second = value => moment(value || new Date()).format("ss");
    LAN.zeroSecond = value => moment(value || new Date()).format("ss");


    LAN.pairCompare = function (array1, array2, nuller) {
        nuller = nuller || undefined;
        var responses = [];
        for (var i in array1) {
            var filter = array1[i];
            var value = array2[i];
            if (Array.isArray(nuller)) {
                if (nuller.indexOf(filter) === -1) {
                    if (filter == value) {
                        responses.push(true);
                    } else {
                        responses.push(false);
                    }
                } else {
                    responses.push(true);
                }
            } else {
                if (filter !== nuller) {
                    if (filter == value) {
                        responses.push(true);
                    } else {
                        responses.push(false);
                    }
                } else {
                    responses.push(true);
                }
            }
        }
        if (responses.length) {
            return responses.indexOf(false) === -1;
        } else {
            return true;
        }
    }

    EASYINTERVAL = [];
    PLAYERID = null;
</script>
<script>
    if (CONFIG.features.onesignal) {
        // var OneSignal = window.OneSignal || [];
        // OneSignal.push(function () {
        //     OneSignal.init({
        //         appId: CONFIG.onesignal.app.appId,
        //         autoResubscribe: true,
        //         autoRegister: true,
        //         welcomeNotification: {
        //             disable: true
        //         }
        //     });
        //
        //     OneSignal.on('subscriptionChange', function (isSubscribed) {
        //         OneSignal.getUserId().then(function (userId) {
        //             PLAYERID = userId;
        //         });
        //     });
        //     OneSignal.getUserId().then(function (userId) {
        //         PLAYERID = userId;
        //     });
        // });

    }
    $(function () {
        $.sessionTimeout({
            keepAlive: false,
            warnAfter: (CONFIG.users.expire * 60000),
            redirAfter: ((CONFIG.users.expire * 60000) * 1.5).toString(),
            onWarn: function () {
                SWEETALERT.lastLaert = myswal({
                    title: MESSAGE.i('mono.timeouttitle'),
                    html: MESSAGE.i("mono.timeoutbody"),
                    showCancelButton: true,
                    confirmButtonText: MESSAGE.i("mono.extendsession"),
                    cancelButtonText: MESSAGE.i("mono.logmeout")
                }).then(result => {
                    console.log(result);
                    if (result.dismiss == "cancel") {
                        new SESSION().destroy();
                        location.reload();
                    }
                });
            },
            onRedir: function () {
                new SESSION().terminated();
            }
        });
    });
</script>
